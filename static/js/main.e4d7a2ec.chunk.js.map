{"version":3,"sources":["images/coronavirus.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","countryList","setCountryList","selectedCountry","setSelectedCountry","statsData","setStatsData","isLoading","setLoadingState","useEffect","axios","get","then","res","data","response","catch","err","console","log","country","className","src","coronavirus","width","height","Object","keys","length","value","onChange","event","target","style","map","key","Date","time","toLocaleString","color","cases","total","recovered","deaths","active","new","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e4d7a2ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.04ecdd69.png\";","import React, { useState, useEffect } from 'react';\nimport coronavirus from './images/coronavirus.png'\nimport './App.css';\nimport axios from 'axios';\nimport Graph from './graph';\n\nfunction App() {\n  const [countryList, setCountryList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"India\");\n  const [statsData, setStatsData] = useState({});\n  const [statsHistoryData, setStatsHistoryData] = useState([]);\n  const [isLoading, setLoadingState] = useState(false);\n\n  useEffect(() => {\n    getCountryList();\n  }, [])\n\n  useEffect(() => {\n    getStatisticsData(selectedCountry);\n    //getStatisticsHistoryData();\n  }, [selectedCountry])\n\n\n\n  function getStatisticsData(country) {\n    axios.get(\"https://covid-193.p.rapidapi.com/statistics?country=\" + country, {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      setStatsData(res.data.response[0]);\n      setLoadingState(false);\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  function getStatisticsHistoryData() {\n    axios.get(\"https://covid-193.p.rapidapi.com/history?country=india\", {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      //console.log(res.data.response);\n      setStatsHistoryData(res.data.response);\n\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  function getCountryList() {\n    axios.get(\"https://covid-193.p.rapidapi.com/countries\", {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      //console.log(res.data.response);\n      setCountryList(res.data.response);\n\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  const changeSelectedCountry = (event) => {\n    setSelectedCountry(event.target.value);\n    //console.log(event.target.value);\n  }\n\n  return (\n    <>\n      {!isLoading ?\n        <>\n          <div className=\"container d-flex justify-content-center\">\n            <div className=\"row\">\n              <div className=\"col-sm-12 text-center\">\n                <h3 className=\"display-4\">\n                  <img src={coronavirus} width=\"60\" height=\"60\" />&nbsp;\n                  <span className=\"align-bottom\">Coronavirus Statistics</span>\n                </h3>\n                <br />\n              </div>\n            </div>\n          </div>\n          {Object.keys(statsData).length > 0 ?\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-12 text-center\">\n                  <div className=\"d-flex justify-content-center\">\n                    <select className=\"form-control\" value={selectedCountry} onChange={changeSelectedCountry} style={{ width: \"250px\" }}>\n                      {\n                        countryList.map((country, key) =>\n                          <option value={country} key={key} >{country}</option>\n                        )\n                      }\n                    </select>\n                  </div>\n                  <br />\n                  <h1 className=\"display-3\">\n                    <b>{statsData.country}</b>\n                  </h1>\n                  <p>\n                    <small>Last updated : {new Date(statsData.time).toLocaleString()}</small>\n                  </p>\n                  <br />\n                  <h2 className=\"display-4\">Total Cases<br /><span style={{ color: \"rgb(48, 247, 238)\" }}>{statsData.cases.total}</span></h2>\n                  <br />\n                  <h2 className=\"display-4\">Recovered <br /><span style={{ color: \"#8ACA2B\" }}>{statsData.cases.recovered}</span></h2>\n                  <br />\n                  <h2 className=\"display-4\">Deaths <br /><span style={{ color: \"rgb(255, 38, 27)\" }}>{statsData.deaths.total}</span></h2>\n                  <br />\n                  <br />\n                  <div className=\"container\">\n                    <div className=\"row\">\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">Active Cases<br /><span style={{ color: \"#ffd230\" }}>{statsData.cases.active}</span></p>\n                      </div>\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">New Cases<br /><span style={{ color: \"#ffd230\" }}>{statsData.cases.new ? statsData.cases.new : \"-\"}</span></p>\n                      </div>\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">New Deaths<br /><span style={{ color: \"#ffd230\" }}>{statsData.deaths.new ? statsData.deaths.new : \"-\"}</span></p>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n                {/* <div className=\"col-md-8 text-center\">\n                  \n                </div> */}\n                {/* <Graph statsHistoryData={statsHistoryData}/> */}\n              </div>\n            </div>\n\n            : \"\"\n          }\n        </> :\n        \"Loading...\"\n      }\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}