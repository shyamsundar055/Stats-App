{"version":3,"sources":["coronavirus.png","graph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graph","props","d3Container","useRef","useEffect","allCountriesStatsData","current","allCountriesData","JSON","parse","stringify","filter","item","country","sort","a","b","cases","active","slice","length","svg","d3","margin","top","right","bottom","left","graphHeight","attr","graphWidth","group","append","rect","selectAll","xScale","domain","d","range","yScale","map","yAxisGroup","yAxis","call","style","data","enter","i","randomColor","on","n","transition","duration","text","transtoZero","delay","ease","transtoMax","labeltoZero","labletoMax","className","ref","App","useState","countryList","setCountryList","selectedCountry","setSelectedCountry","statsData","setStatsData","setallCountriesStatsData","isLoading","setLoadingState","axios","get","then","res","response","catch","err","console","log","fontSize","alt","src","coronavirus","width","height","Object","keys","value","onChange","event","target","key","Date","time","toLocaleString","color","total","recovered","deaths","new","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4a08e98f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.04ecdd69.png\";","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3'\r\nimport randomColor from 'randomcolor'\r\n\r\nfunction Graph(props) {\r\n    const d3Container = useRef(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.allCountriesStatsData && d3Container.current) {\r\n\r\n            let allCountriesData = JSON.parse(JSON.stringify(props.allCountriesStatsData));\r\n\r\n            /* Remove World,All items then sort and slice */\r\n            allCountriesData = allCountriesData.filter((item) => { return (item.country !== \"World\" && item.country !== \"All\") })\r\n                .sort(function (a, b) {\r\n                    return b.cases.active - a.cases.active\r\n                })\r\n                .slice(0, allCountriesData.length > 10 ? 10 : allCountriesData);\r\n\r\n            const svg = d3.select(d3Container.current);\r\n\r\n\r\n            const margin = { top: 30, right: 30, bottom: 0, left: 75 };\r\n            const graphWidth = 850; //window.innerWidth/3;\r\n            const graphHeight = allCountriesData.length * (50);\r\n\r\n            svg.attr(\"viewBox\", `0 0 ${graphWidth - 300} ${graphHeight}`);\r\n\r\n            const group = svg.append(\"g\")\r\n                .attr(\"width\", \"100%\")\r\n                .attr(\"viewBox\", `0 0 ${graphWidth} ${graphHeight}`);\r\n\r\n            const rect = group.selectAll(\"rect\");\r\n\r\n            const xScale = d3.scaleLinear()\r\n                .domain([0, d3.max(allCountriesData, function (d) { return d.cases.active; })])\r\n                .range([0, graphWidth - 400 - margin.left - margin.right]);\r\n\r\n            const yScale = d3.scaleBand()\r\n                .domain(allCountriesData.map(item => item.country))\r\n                .range([0, graphHeight - 50 - margin.top - margin.bottom]);\r\n\r\n            const yAxisGroup = group.append(\"g\");\r\n            const yAxis = d3.axisLeft(yScale);\r\n\r\n            yAxisGroup.call(yAxis).attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n            yAxisGroup.selectAll(\"text\").style(\"font-size\", \"12px\").style('font-weight', \"300\");\r\n\r\n            rect.data(allCountriesData)\r\n                .enter().append(\"rect\")\r\n                .attr(\"x\", margin.left + 1)\r\n                .attr(\"width\", (d, i) => xScale(d.cases.active))\r\n                .attr(\"fill\", d => randomColor())\r\n                .attr(\"height\", 20)\r\n                .attr(\"y\", (d, i) => yScale(d.country) + (80 / 2))\r\n                .on(\"mouseover\", function (d, i, n) {\r\n                    d3.select(n[i])\r\n                        .transition()\r\n                        .duration(100)\r\n                        .style(\"opacity\", 0.7)\r\n                })\r\n                .on(\"mouseout\", function (d, i, n) {\r\n                    d3.select(n[i])\r\n                        .transition()\r\n                        .duration(100)\r\n                        .style(\"opacity\", 1)\r\n                });\r\n\r\n            group.selectAll('.label')\r\n                .data(allCountriesData)\r\n                .enter()\r\n                .append(\"text\")\r\n                .attr(\"class\", \"lable\")\r\n                .attr(\"alignment-baseline\", \"middle\")\r\n                .attr(\"x\", d => xScale(d.cases.active) + margin.left + 10)\r\n                .attr(\"y\", d => yScale(d.country) + (50))\r\n                .style(\"font-size\", \"12px\")\r\n                .style(\"font-weight\", \"300\")\r\n                .style(\"fill\", \"white\")\r\n                .text(d => d.cases.active);\r\n\r\n            if (allCountriesData.length > 0) {\r\n                group.append(\"text\")\r\n                    .attr(\"x\", 100)\r\n                    .attr(\"y\", 25)\r\n                    .attr(\"font-size\", \"18px\")\r\n                    .attr(\"font-weight\", \"300\")\r\n                    .attr(\"fill\", \"#fff\")\r\n                    .text(`Top ${allCountriesData.length} Countries with active cases`);\r\n            }\r\n\r\n            /* transition logic */\r\n            let transtoZero = d3.transition()\r\n                .delay(0).duration(0).ease(d3.easeLinear);\r\n            let transtoMax = d3.transition()\r\n                .delay(200).duration(2000).ease(d3.easeLinear);\r\n\r\n            transtoZero.selectAll(\"rect\")\r\n                .attr(\"width\", d => 0);\r\n            transtoMax.selectAll(\"rect\")\r\n                .attr(\"width\", d => xScale(d.cases.active));\r\n\r\n            let labeltoZero = d3.transition()\r\n                .delay(0).duration(0).ease(d3.easeLinear);\r\n            let labletoMax = d3.transition()\r\n                .delay(200).duration(2000).ease(d3.easeLinear);\r\n\r\n            labeltoZero.selectAll(\"text\").filter(\".lable\")\r\n                .attr(\"x\", d => margin.left);\r\n            labletoMax.selectAll(\"text\").filter(\".lable\")\r\n                .attr(\"x\", d => xScale(d.cases.active) + margin.left + 10);\r\n\r\n        }\r\n    }, [props.allCountriesStatsData])\r\n\r\n\r\n    return (\r\n        <div className=\"col-lg-6 text-center\">\r\n            <div>\r\n                <br />\r\n                <svg ref={d3Container}>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph","import React, { useState, useEffect } from 'react';\nimport coronavirus from './coronavirus.png'\nimport './App.css';\nimport axios from 'axios';\nimport Graph from './graph';\n\nfunction App() {\n  const [countryList, setCountryList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"World\");\n  const [statsData, setStatsData] = useState({});\n  const [allCountriesStatsData, setallCountriesStatsData] = useState([]);\n  const [isLoading, setLoadingState] = useState(false);\n\n  useEffect(() => {\n    getCountryList();\n  }, [])\n\n  useEffect(() => {\n    getStatisticsData(selectedCountry);\n    getAllCountriesStatisticsData();\n  }, [selectedCountry])\n\n\n\n  function getStatisticsData(country) {\n    axios.get(\"https://covid-193.p.rapidapi.com/statistics?country=\" + country, {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      setStatsData(res.data.response[0]);\n      setLoadingState(false);\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  function getAllCountriesStatisticsData() {\n    axios.get(\"https://covid-193.p.rapidapi.com/statistics\", {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      setallCountriesStatsData(res.data.response);\n\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  function getCountryList() {\n    axios.get(\"https://covid-193.p.rapidapi.com/countries\", {\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\"\n      }\n    }).then(res => {\n      setCountryList(res.data.response);\n\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  const changeSelectedCountry = (event) => {\n    setSelectedCountry(event.target.value);\n  }\n\n  return (\n    <>\n      {!isLoading ?\n        <>\n          <div className=\"container d-flex justify-content-center\">\n            <div className=\"row\">\n              <div className=\"col-sm-12 text-center\">\n                <h3 className=\"display-4\" style={{ fontSize: \"3.0rem\" }}>\n                  <img alt=\"Covid-19\" src={coronavirus} width=\"60\" height=\"60\" />&nbsp;\n                  <span className=\"align-bottom\">\n                    Coronavirus Statistics\n                  </span>\n                </h3>\n              </div>\n            </div>\n          </div>\n          {Object.keys(statsData).length > 0 ?\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 text-center\">\n                  <br />\n                  <div className=\"d-flex justify-content-center\">\n                    <select className=\"form-control\" value={selectedCountry} onChange={changeSelectedCountry} style={{ width: \"250px\" }}>\n                      {\n                        countryList.map((country, key) =>\n                          <option value={country} key={key} >{country}</option>\n                        )\n                      }\n                    </select>\n                  </div>\n                  <br />\n                  <h1 className=\"display-3\">\n                    <b>{statsData.country}</b>\n                  </h1>\n                  <p>\n                    <small>Last updated : {new Date(statsData.time).toLocaleString()}</small>\n                  </p>\n                  <br />\n                  <h2 className=\"display-4\">Total Cases<br /><span style={{ color: \"rgb(48, 247, 238)\" }}>{statsData.cases.total}</span></h2>\n                  <br />\n                  <h2 className=\"display-4\">Recovered <br /><span style={{ color: \"#8ACA2B\" }}>{statsData.cases.recovered}</span></h2>\n                  <br />\n                  <h2 className=\"display-4\">Deaths <br /><span style={{ color: \"rgb(255, 38, 27)\" }}>{statsData.deaths.total}</span></h2>\n                  <br />\n                  <div className=\"container\">\n                    <div className=\"row\">\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">Active Cases<br /><span style={{ color: \"#ffd230\" }}>{statsData.cases.active}</span></p>\n                      </div>\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">New Cases<br /><span style={{ color: \"#ffd230\" }}>{statsData.cases.new ? statsData.cases.new : \"-\"}</span></p>\n                      </div>\n                      <div className=\"col-sm\">\n                        <p className=\"h3\">New Deaths<br /><span style={{ color: \"#ffd230\" }}>{statsData.deaths.new ? statsData.deaths.new : \"-\"}</span></p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Graph allCountriesStatsData={allCountriesStatsData} />\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-12 text-center\">\n                  <footer className=\"text-center text-muted font-weight-light\">\n                    <span style={{ fontSize: \"12px\" }} >\n                      Data provider <a href=\"https://api-sports.io/documentation/covid-19\" target=\"_blank\" rel=\"noopener noreferrer\">API-SPORTS</a>&nbsp;&nbsp;|&nbsp;\n                      Created by <a href=\"https://github.com/shyamsundar055\" target=\"_blank\" rel=\"noopener noreferrer\">Shyam Sundar</a>\n                    </span>\n                  </footer>\n                </div>\n              </div>\n            </div>\n\n            : \"\"\n          }\n        </> :\n        \"Loading...\"\n      }\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}