{"version":3,"sources":["coronavirus.png","components/header.js","components/footer.js","components/loader.js","components/statsdatagraph.js","components/statsdata.js","components/worldmapdata.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","style","fontSize","alt","src","coronavirus","width","height","Footer","href","target","rel","Loader","StatsDataGraph","props","d3Container","useRef","useEffect","allCountriesStatsData","current","allCountriesData","JSON","parse","stringify","filter","item","country","sort","a","b","cases","active","slice","length","svg","d3","margin","top","right","bottom","left","graphHeight","attr","graphWidth","group","append","rect","selectAll","xScale","domain","d","range","yScale","map","yAxisGroup","yAxis","call","data","enter","i","randomColor","on","n","transition","duration","text","transtoZero","delay","ease","transtoMax","labeltoZero","labletoMax","ref","StatsData","value","selectedCountry","onChange","changeSelectedCountry","countryList","key","statsData","Date","time","toLocaleString","color","total","recovered","deaths","new","WorldMapData","d3Tooltip","projection","scale","translate","tooltip","path","topojson","geoData","objects","countries","features","countryDetails","find","countryDetail","replace","toUpperCase","properties","name","this","html","pageY","window","innerHeight","pageX","visibility","backgroundColor","App","useState","setCountryList","setSelectedCountry","setStatsData","setallCountriesStatsData","isLoading","setLoadingState","apiBaseURL","apiHost","apiKey","axios","get","then","res","response","catch","err","console","log","timer","setTimeout","clearTimeout","Object","keys","event","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b9d99938.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.04ecdd69.png\";","import React from 'react';\r\nimport coronavirus from '../coronavirus.png'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"container d-flex justify-content-center\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-12 text-center\">\r\n                    <h3 className=\"display-4\" style={{ fontSize: \"2.5rem\" }}>\r\n                        <img alt=\"Covid-19\" src={coronavirus} width=\"42\" height=\"42\" />&nbsp;\r\n                        <span className=\"align-bottom\">\r\n                            Coronavirus Statistics\r\n                        </span>\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 text-center\">\r\n                    <footer className=\"text-center text-muted font-weight-light\">\r\n                        <span style={{ fontSize: \"12px\" }} >\r\n                            Data provider <a href=\"https://api-sports.io/documentation/covid-19\" target=\"_blank\" rel=\"noopener noreferrer\">API-SPORTS</a>&nbsp;&nbsp;|&nbsp;\r\n                            Created by <a href=\"https://github.com/shyamsundar055\" target=\"_blank\" rel=\"noopener noreferrer\">Shyam Sundar</a>\r\n                        </span>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\" }}>\r\n            <div className=\"cssload-body\">\r\n                <span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </span>\r\n                <div className=\"cssload-base\">\r\n                    <span></span>\r\n                    <div className=\"cssload-face\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"cssload-longfazers\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3'\r\nimport randomColor from 'randomcolor'\r\n\r\nfunction StatsDataGraph(props) {\r\n    const d3Container = useRef(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.allCountriesStatsData && d3Container.current) {\r\n\r\n            let allCountriesData = JSON.parse(JSON.stringify(props.allCountriesStatsData));\r\n\r\n            /* Remove World,All items then sort and slice */\r\n            allCountriesData = allCountriesData.filter((item) => { \r\n                return (item.country !== \"World\" && item.country !== \"All\" && item.country !== \"-Africa-\" && item.country !== \"-Asia-\" \r\n                        && item.country !== \"-Europe-\" && item.country !== \"-North-America-\" && item.country !== \"-Oceania-\" && item.country !== \"-South-America-\" && item.country !== \"--\") \r\n        })\r\n                .sort(function (a, b) {\r\n                    return b.cases.active - a.cases.active\r\n                })\r\n                .slice(0, allCountriesData.length > 10 ? 10 : allCountriesData);\r\n\r\n            const svg = d3.select(d3Container.current);\r\n\r\n\r\n            const margin = { top: 30, right: 30, bottom: 0, left: 75 };\r\n            const graphWidth = 850; //window.innerWidth/3;\r\n            const graphHeight = allCountriesData.length * (50);\r\n\r\n            svg.attr(\"viewBox\", `0 0 ${graphWidth - 300} ${graphHeight}`);\r\n\r\n            const group = svg.append(\"g\")\r\n                .attr(\"width\", \"100%\")\r\n                .attr(\"viewBox\", `0 0 ${graphWidth} ${graphHeight}`);\r\n\r\n            const rect = group.selectAll(\"rect\");\r\n\r\n            const xScale = d3.scaleLinear()\r\n                .domain([0, d3.max(allCountriesData, function (d) { return d.cases.active; })])\r\n                .range([0, graphWidth - 400 - margin.left - margin.right]);\r\n\r\n            const yScale = d3.scaleBand()\r\n                .domain(allCountriesData.map(item => item.country))\r\n                .range([0, graphHeight - 50 - margin.top - margin.bottom]);\r\n\r\n            const yAxisGroup = group.append(\"g\");\r\n            const yAxis = d3.axisLeft(yScale);\r\n\r\n            yAxisGroup.call(yAxis).attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n            yAxisGroup.selectAll(\"text\").style(\"font-size\", \"12px\").style('font-weight', \"300\");\r\n\r\n            rect.data(allCountriesData)\r\n                .enter().append(\"rect\")\r\n                .attr(\"x\", margin.left + 1)\r\n                .attr(\"width\", (d, i) => xScale(d.cases.active))\r\n                .attr(\"fill\", d => randomColor())\r\n                .attr(\"height\", 20)\r\n                .attr(\"y\", (d, i) => yScale(d.country) + (80 / 2))\r\n                .on(\"mouseover\", function (d, i, n) {\r\n                    d3.select(n[i])\r\n                        .transition()\r\n                        .duration(100)\r\n                        .style(\"opacity\", 0.7)\r\n                })\r\n                .on(\"mouseout\", function (d, i, n) {\r\n                    d3.select(n[i])\r\n                        .transition()\r\n                        .duration(100)\r\n                        .style(\"opacity\", 1)\r\n                });\r\n\r\n            group.selectAll('.label')\r\n                .data(allCountriesData)\r\n                .enter()\r\n                .append(\"text\")\r\n                .attr(\"class\", \"lable\")\r\n                .attr(\"alignment-baseline\", \"middle\")\r\n                .attr(\"x\", d => xScale(d.cases.active) + margin.left + 10)\r\n                .attr(\"y\", d => yScale(d.country) + (50))\r\n                .style(\"font-size\", \"12px\")\r\n                .style(\"font-weight\", \"300\")\r\n                .style(\"fill\", \"white\")\r\n                .text(d => d.cases.active);\r\n\r\n            if (allCountriesData.length > 0) {\r\n                group.append(\"text\")\r\n                    .attr(\"x\", 100)\r\n                    .attr(\"y\", 25)\r\n                    .attr(\"font-size\", \"18px\")\r\n                    .attr(\"font-weight\", \"300\")\r\n                    .attr(\"fill\", \"#fff\")\r\n                    .text(`Top ${allCountriesData.length} Countries with active cases`);\r\n            }\r\n\r\n            /* transition logic */\r\n            let transtoZero = d3.transition()\r\n                .delay(0).duration(0).ease(d3.easeLinear);\r\n            let transtoMax = d3.transition()\r\n                .delay(200).duration(2000).ease(d3.easeLinear);\r\n\r\n            transtoZero.selectAll(\"rect\")\r\n                .attr(\"width\", d => 0);\r\n            transtoMax.selectAll(\"rect\")\r\n                .attr(\"width\", d => xScale(d.cases.active));\r\n\r\n            let labeltoZero = d3.transition()\r\n                .delay(0).duration(0).ease(d3.easeLinear);\r\n            let labletoMax = d3.transition()\r\n                .delay(200).duration(2000).ease(d3.easeLinear);\r\n\r\n            labeltoZero.selectAll(\"text\").filter(\".lable\")\r\n                .attr(\"x\", d => margin.left);\r\n            labletoMax.selectAll(\"text\").filter(\".lable\")\r\n                .attr(\"x\", d => xScale(d.cases.active) + margin.left + 10);\r\n\r\n        }\r\n    }, [props.allCountriesStatsData])\r\n\r\n\r\n    return (\r\n        <div className=\"col-lg-6 text-center\">\r\n            <div>\r\n                <br />\r\n                <svg ref={d3Container}>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsDataGraph","import React from 'react';\r\nimport StatsDataGraph from './statsdatagraph';\r\n\r\nfunction StatsData(props) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-6 text-center\">\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <select className=\"form-control\" value={props.selectedCountry} onChange={props.changeSelectedCountry} style={{ width: \"250px\" }}>\r\n                            {\r\n                                props.countryList.map((country, key) =>\r\n                                    <option value={country} key={key} >{country}</option>\r\n                                )\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                    <h1 className=\"display-3 country\">\r\n                        <b>{props.statsData.country}</b>\r\n                    </h1>\r\n                    <p>\r\n                        <small>Last updated : {new Date(props.statsData.time).toLocaleString()}</small>\r\n                    </p>\r\n                    <br />\r\n                    <h2 className=\"display-4 countryData\">Total Cases<br /><span style={{ color: \"rgb(48, 247, 238)\" }}>{props.statsData.cases.total}</span></h2>\r\n                    <br />\r\n                    <h2 className=\"display-4 countryData\">Recovered <br /><span style={{ color: \"#8ACA2B\" }}>{props.statsData.cases.recovered}</span></h2>\r\n                    <br />\r\n                    <h2 className=\"display-4 countryData\">Deaths <br /><span style={{ color: \"rgb(255, 38, 27)\" }}>{props.statsData.deaths.total}</span></h2>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm \">\r\n                                <p className=\"countrySubData\">Active Cases<br /><span style={{ color: \"#ffd230\" }}>{props.statsData.cases.active}</span></p>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <p className=\"countrySubData\">New Cases<br /><span style={{ color: \"#ffd230\" }}>{props.statsData.cases.new ? props.statsData.cases.new : \"-\"}</span></p>\r\n                            </div>\r\n                            <div className=\"col-sm\">\r\n                                <p className=\"countrySubData\">New Deaths<br /><span style={{ color: \"#ffd230\" }}>{props.statsData.deaths.new ? props.statsData.deaths.new : \"-\"}</span></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <StatsDataGraph allCountriesStatsData={props.allCountriesStatsData} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default StatsData;","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3'\r\nimport * as topojson from 'topojson-client';\r\nimport geoData from '../countries-110m';\r\n\r\nfunction WorldMapData(props) {\r\n    const d3Container = useRef(null);\r\n    const d3Tooltip = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (props.allCountriesStatsData && d3Container.current && d3Tooltip.current) {\r\n\r\n            let allCountriesData = JSON.parse(JSON.stringify(props.allCountriesStatsData));\r\n\r\n            /* Remove World,All items */\r\n            allCountriesData = allCountriesData.filter((item) => { return (item.country !== \"World\" && item.country !== \"All\") })\r\n\r\n            const width = 750;\r\n            const height = 320;\r\n\r\n            const svg = d3.select(d3Container.current)\r\n                .attr(\"viewBox\", `0 0 ${width} ${height}`);\r\n\r\n            const projection = d3.geoMercator()\r\n                .scale([75])\r\n                .translate([350, 225]);\r\n\r\n\r\n            const tooltip = d3.select(d3Tooltip.current);\r\n            const path = d3.geoPath().projection(projection)\r\n\r\n\r\n            const g = svg.append(\"g\")\r\n                .attr(\"width\", \"100%\")\r\n                .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n\r\n            g.selectAll(\"path\")\r\n                .data(topojson.feature(geoData, geoData.objects.countries).features)\r\n                .enter().append(\"path\")\r\n                .attr(\"d\", path)\r\n                .attr(\"fill\", function (d) {\r\n                    let countryDetails = allCountriesData.find(countryDetail => countryDetail.country.replace(\"-\", \" \").toUpperCase() === d.properties.name.toUpperCase())\r\n                    let range = countryDetails ? countryDetails.cases.active : 0;\r\n                    // if(range > 100000)\r\n                    //     return \"#174EA6\";\r\n                    // else if(range >= 50000 && range <= 99999)\r\n                    //     return \"#1967D2\";\r\n                    // else if(range >= 1000 && range <= 49999)\r\n                    //     return \"#4285F4\";\r\n                    // else if(range >= 100 && range <= 999)\r\n                    //     return \"#8AB4F8\";\r\n                    // else\r\n                    //     return \"#D2E3FC\";\r\n\r\n                    // if (range > 100000)\r\n                    //     return \"#991101\";\r\n                    // else if (range >= 50000 && range <= 99999)\r\n                    //     return \"#C23210\";\r\n                    // else if (range >= 1000 && range <= 49999)\r\n                    //     return \"#D65F59\";\r\n                    // else if (range >= 100 && range <= 999)\r\n                    //     return \"#FF8A83\";\r\n                    // else\r\n                    //     return \"#FFD0C2\";\r\n\r\n                    if (range > 100000)\r\n                        return \"red\";\r\n                    else if (range >= 50000 && range <= 99999)\r\n                        return \"#ffc254\";\r\n                    else if (range >= 1000 && range <= 49999)\r\n                        return \"#FFD0C2\";\r\n                    else if (range >= 100 && range <= 999)\r\n                        return \"#71e3e8\";\r\n                    else\r\n                        return \"#7cdc7c\";\r\n                }\r\n                )\r\n                .attr(\"stroke\", \"#B4B1B1\")\r\n                .attr(\"stroke-width\", \"0.3px\")\r\n                .on(\"mouseover\", function (d, i) {\r\n                    let countryDetails = allCountriesData.find(countryDetail => countryDetail.country.replace(\"-\", \" \").toUpperCase() === d.properties.name.toUpperCase())\r\n                    d3.select(this).attr(\"stroke-width\", 1).attr(\"stroke\", \"yellow\")\r\n                    return tooltip.style(\"visibility\", \"visible\").html(\r\n                        `<ul class=\"visualization-tooltip-item-list\">\r\n                            <li class=\"visualization-tooltip-item\">\r\n                                <span style=\"font-family:Arial;font-size:13px;color:#000000;opacity:1;margin:0;font-style:none;text-decoration:none;font-weight:bold;\">\r\n                                </span>\r\n                            </li>\r\n                            <li class=\"visualization-tooltip-item\"><span style=\"font-family:Arial;font-size:13px;color:#000000;opacity:1;margin:0;font-style:none;text-decoration:none;font-weight:none;\">\r\n                            <div class=\"text-center\"> \r\n                                <strong>${d.properties.name}</strong> \r\n                            </div>\r\n                            <hr/> \r\n                            <div> \r\n                                <span> <strong>${countryDetails ? countryDetails.cases.active : \"-\"}</strong></span> active\r\n                            </div>\r\n                            <div> \r\n                                <span style=\"color:#446514\"> <strong>${countryDetails ? countryDetails.cases.recovered : \"-\"}</strong></span> recovered\r\n                            </div>\r\n                            <div> \r\n                                <span style=\"color:rgb(255, 38, 27)\"> <strong>${countryDetails ? countryDetails.deaths.total : \"-\"}</strong></span> deaths\r\n                            </div>\r\n                            </li>\r\n                        </ul>`\r\n\r\n\r\n                    );\r\n                })\r\n                .on(\"mousemove\", function (d) {\r\n                    tooltip.style(\"top\", (d3.event.pageY - window.innerHeight)+10 + \"px\")\r\n                        .style(\"left\", (d3.event.pageX + 10) + \"px\")\r\n                })\r\n                .on(\"mouseout\", function (d, i) {\r\n                    d3.select(this).attr(\"stroke-width\", \"0.3px\").attr(\"stroke\", \"#B4B1B1\");\r\n                    tooltip.style(\"visibility\", \"hidden\");\r\n                });\r\n\r\n\r\n        }\r\n\r\n    }, [props.allCountriesStatsData])\r\n\r\n    return (\r\n        <div className=\"col-lg-12 text-center\">\r\n            <div className=\"d-none d-md-block\">\r\n                <div>\r\n                    <div className=\"tooltip visualization-tooltip\" style={{ width: \"187px\", height: \"172px\", visibility: \"hidden\" }} ref={d3Tooltip}>\r\n                    </div>\r\n                    <svg ref={d3Container}>\r\n                    </svg>\r\n                </div>\r\n                <div style={{ fontSize: \"0.85em\" }}>Active cases</div>\r\n                <div className=\"d-flex justify-content-center\" style={{ width: \"100%\" }}>\r\n                    <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td style={{ backgroundColor: \"#7cdc7c\" }}></td>\r\n                                <td style={{ backgroundColor: \"#71e3e8\" }}></td>\r\n                                <td style={{ backgroundColor: \"#FFD0C2\" }}></td>\r\n                                <td style={{ backgroundColor: \"#ffc254\" }}></td>\r\n                                <td style={{ backgroundColor: \"red\" }}></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ width: \"20%\" }}>0-99</td>\r\n                                <td style={{ width: \"20%\" }}>100-999</td>\r\n                                <td style={{ width: \"20%\" }}>1000-49999</td>\r\n                                <td style={{ width: \"20%\" }}>50000-99999</td>\r\n                                <td style={{ width: \"20%\" }}>>=100000</td> \r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorldMapData","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport axios from 'axios'; \n\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Loader from './components/loader';\nimport StatsData from './components/statsdata';\nimport WorldMapData from './components/worldmapdata';\n\n\nfunction App() {\n\n  const [countryList, setCountryList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"World\");\n  const [statsData, setStatsData] = useState({});\n  const [allCountriesStatsData, setallCountriesStatsData] = useState([]);\n  const [isLoading, setLoadingState] = useState(true);\n\n  const apiBaseURL = \"https://covid-193.p.rapidapi.com/\";\n  const apiHost = \"covid-193.p.rapidapi.com\";\n  const apiKey = \"0c1bda6b16mshf44500f863dd2e0p10037cjsn7c2afcb3895f\";\n\n  useEffect(() => {\n    getCountryList();\n\n    const timer = setTimeout(() => {\n      setLoadingState(false);\n    }, 1200);\n    return () => clearTimeout(timer);\n\n  }, [])\n\n  useEffect(() => {\n    getStatisticsData(selectedCountry);\n    getAllCountriesStatisticsData();\n  }, [selectedCountry])\n\n  function getCountryList() {\n    axios.get(apiBaseURL + \"countries\", {\n      \"headers\": {\n        \"x-rapidapi-host\": apiHost,\n        \"x-rapidapi-key\": apiKey\n      }\n    }).then(res => {\n      setCountryList(res.data.response);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function getStatisticsData(country) {\n    axios.get(apiBaseURL + \"statistics?country=\" + country, {\n      \"headers\": {\n        \"x-rapidapi-host\": apiHost,\n        \"x-rapidapi-key\": apiKey\n      }\n    }).then(res => {\n      setStatsData(res.data.response[0]);\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  function getAllCountriesStatisticsData() {\n    axios.get(apiBaseURL + \"statistics\", {\n      \"headers\": {\n        \"x-rapidapi-host\": apiHost,\n        \"x-rapidapi-key\": apiKey\n      }\n    }).then(res => {\n      setallCountriesStatsData(res.data.response);\n    }).catch(err => {\n      console.log(err);\n    });\n\n  } \n  \n  const changeSelectedCountry = (event) => {\n    setSelectedCountry(event.target.value);\n  }\n\n  return (\n    <>\n      {\n        !isLoading ?\n          <>\n            {\n              Object.keys(statsData).length > 0 ? \n                <>\n                  <Header /> \n                  <StatsData selectedCountry={selectedCountry}\n                    countryList={countryList}\n                    statsData={statsData}\n                    changeSelectedCountry={changeSelectedCountry}\n                    allCountriesStatsData={allCountriesStatsData} /> \n                  <WorldMapData allCountriesStatsData={allCountriesStatsData} />\n                  <Footer />\n                </>\n                : \"\"\n            }\n          </> :\n          <Loader />\n      }\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}